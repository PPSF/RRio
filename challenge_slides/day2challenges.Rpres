day2challenges
========================================================
author: alathea + andrew
date: 28 Sept 2015

Challenge
========================================================

```r
library(ggplot2)
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
  geom_point()
```

> In the previous examples and challenge we've used the `aes` function to tell
> the scatterplot **geom** about the **x** and **y** locations of each point.
> Another *aesthetic* property we can modify is the point *color*. Modify the
> code from the previous challenge to **color** the points by the "continent"
> column. What trends do you see in the data? Are they what you expected?
>

Challenge
========================================================

```r
library(ggplot2)
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap, colour = continent)) +
  geom_point() +
  geom_line()
```

> Switch the order of the point and line layers from the previous example. What
> happened?

Challenge
========================================================

>
> How could you modify the plot to have a log scale on the y-axis?
>

Challenge
========================================================

```r
x <- matrix(rnorm(18), ncol=6, nrow=3)
```

What do you think will be the result of
`length(x)`?
Try it.
Were you right? Why / why not?

Challenge
========================================================

* Make another matrix, this time containing the numbers 1:50,
with 5 columns and 10 rows.
* Did the `matrix` function fill your matrix by column, or by
row, as its default behaviour?
* See if you can figure out how to change this.
(hint: read the documentation for `matrix`!)


Challenge
========================================================

```r
df <- data.frame(id = c('a', 'b', 'c', 'd', 'e', 'f'), x = 1:6, y = c(214:219))
df
```
Try using the `length` function to query
your data frame `df`. Does it give the result
you expect?

Challenge
========================================================

Create a data frame that holds the following information for yourself:

* First name
* Last name
* Age

Then use rbind to add the same information for the people sitting near you.

Challenge
========================================================
```{r}
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
x
```

1. Come up with at least 3 different commands that will produce the following output:

```{r, echo=FALSE}
x[2:4]
```

2. Compare notes with your neighbour. Did you have different strategies?

Challenge
========================================================

```{r}
m <- matrix(1:18, nrow=3, ncol=6)
print(m)
```

Which of the following commands will extract the values 11 and 14?

1. `m[2,4,2,5]`
1. `m[2:5]`
1. `m[4:5,2]`
1. `m[2,c(4,5)]`

Get gapminder
========================================================

[`http://bit.ly/gminder`](http://bit.ly/gminder)
